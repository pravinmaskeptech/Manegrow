@model Micraft.ManeGrowAgro.Models.ProductMaster

@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_Layout.cshtml";
}


<div class="content-header">
    <div class="container-fluid">
        <div class="row mb-2">
            <div class="col-lg-2 col-md-2 col-12">

            </div><!-- /.col -->
        </div><!-- /.row -->
    </div><!-- /.container-fluid -->
</div>
<!-- /.content-header -->
<!-- Main content -->
<section class="content">
    <div class="container-fluid">
        <div class="row">
            <div class="col-12">
                <div class="card">
                    <div class="card-body">
                        @using (Html.BeginForm("Create", "ProductMasters", FormMethod.Post, new
                        {
                            @id = "form0",
                            enctype = "multipart/form-data",
                            @class = "form-horizontal",
                            data_bv_message = "This value is not valid",
                            data_toggle = "validator",
                            data_bv_feedbackicons_valid = "glyphicon glyphicon-ok",
                            data_bv_feedbackicons_invalid = "glyphicon glyphicon-remove",
                            data_bv_feedbackicons_validating = "glyphicon glyphicon-refresh"
                        }))

                        {
                            @Html.AntiForgeryToken()

                            <div class="form-horizontal">
                                <h4>Product Master</h4>
                                <hr />
                                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                                <div class="row">
                                    <div class="col-md-4 col-12 mb-3">
                                        @Html.LabelFor(model => model.TypeID)
                                        @Html.DropDownList("TypeID", new SelectList(ViewBag.ProdType, "ID", "Type"), "--Select--", new { @class = "form-control", Autocomplete = "off", data_bv_notempty = "true", data_bv_notempty_message = "Product Type is required and cannot be empty", required = "required" })
                                        @*@Html.EditorFor(model => model.Mode, new { htmlAttributes = new { @class = "form-control" } })*@
                                        @Html.ValidationMessageFor(model => model.TypeID, "", new { @class = "text-danger" })
                                    </div>
                                    <div class="col-md-4 col-12 mb-3">
                                        @Html.LabelFor(model => model.Name)
                                        @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control", Autocomplete = "off", data_bv_notempty = "true", data_bv_notempty_message = "Product Name is required and cannot be empty", required = "required" @*onchange = "CheckDuplicateProductName()"*@ } })
                                        @*@Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })*@
                                    </div>

                                    <div class="col-md-4 col-12 mb-3">
                                        @Html.LabelFor(model => model.Discription)
                                        <br />
                                        @Html.TextAreaFor(model => model.Discription, new { cols = "40", htmlAttributes = new { @class = "form-control"} })
                                        @*@Html.ValidationMessageFor(model => model.Discription, "", new { @class = "text-danger" })*@
                                    </div>


                                </div>
                                <div class="row">
                                    <div class="col-md-4 col-12 mb-3">
                                        @Html.LabelFor(model => model.Size)
                                        @Html.EditorFor(model => model.Size, new { htmlAttributes = new { @class = "form-control" } })
                                        @*@Html.EditorFor(model => model.Vendor, new { htmlAttributes = new { @class = "form-control" } })*@
                                        @*@Html.ValidationMessageFor(model => model.Size, "", new { @class = "text-danger" })*@
                                    </div>
                                    <div class="col-md-4 col-12 mb-3">
                                        @Html.LabelFor(model => model.Weight)
                                        @Html.EditorFor(model => model.Weight, new { htmlAttributes = new { @class = "form-control", Autocomplete = "off", data_bv_notempty = "true", data_bv_notempty_message = "Weight is required and cannot be empty", required = "required" } })
                                        @*@Html.ValidationMessageFor(model => model.Weight, "", new { @class = "text-danger" })*@
                                    </div>
                                    <div class="col-md-4 col-12 mb-3">
                                        @Html.LabelFor(model => model.ProdUom)
                                        @Html.DropDownList("ProdUom", new SelectList(ViewBag.ProdUom, "UomName", "UomName"), "Select UOM", new { @class = "form-control", Autocomplete = "off", data_bv_notempty = "true", data_bv_notempty_message = "ProdUom is required and cannot be empty", required = "required" })
                                        @*@Html.ValidationMessageFor(model => model.ProdUom, "", new { @class = "text-danger" })*@
                                    </div>



                                </div>
                                <div class="row">
                                    <div class="col-md-4 col-12 mb-3">
                                        @Html.LabelFor(model => model.Rate)
                                        @Html.EditorFor(model => model.Rate, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.Rate, "", new { @class = "text-danger" })
                                    </div>
                                    <div class="col-md-4 col-12 mb-3">
                                        @Html.LabelFor(model => model.HSCCode)
                                        @Html.EditorFor(model => model.HSCCode, new { htmlAttributes = new { @class = "form-control" } })
                                        @*@Html.ValidationMessageFor(model => model.HSCCode, "", new { @class = "text-danger" })*@
                                    </div>



                                    <div class="col-md-4 col-12 mb-3">
                                        @Html.LabelFor(model => model.Image)
                                        <input type="file" id="eImage" class="form-control" placeholder="Image">
                                        @Html.ValidationMessageFor(model => model.Image, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="row">

                                    <div class="col-md-7">
                                        <div class="form-group">
                                            <div class="col-md-4">
                                            </div>
                                            <div class="col-md-8">

                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-md-5">
                                        <div class="form-group">
                                            <div class="col-md-4">
                                            </div>
                                            <div class="col-md-8">
                                                <input type="submit" id="create" value="Save" class="btn btn-primary" onclick="CheckVal(event);" />&nbsp;&nbsp;
                                                @Html.ActionLink("Back to List", "Index", null, new { @class = "btn btn-primary" })
                                            </div>

                                        </div>
                                    </div>
                                </div>


                            </div>
                        }


                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

<script>
     $(document).ready(function () {
        $("#form0").bootstrapValidator();
        var tEMP = '@TempData["error"]';
        if (tEMP != "" && tEMP != undefined && tEMP != null) {
            swal("Error!", tEMP, "error");
        }

    });
    //function CheckDuplicateProductName() {
    //    $.ajax({
    //        url: "/ProductMasters/CheckDuplicateProductName",
    //        type: "GET",
    //        dataType: "json",
    //        data: { Name: $('#Name').val(), ID: $('#ID').val(), Type: "Create" },
    //        success: function (result) {
    //            if (result != 0) {
    //                $('#Name').val('');
    //                $("#form0").bootstrapValidator('revalidateField', 'Name');
    //                toastr.error('Product Name Already Added..')
    //            }
    //        },
    //        error: function (ex) {
    //            console.log("error");
    //            console.log(ex);
    //        }
    //    });

    //}
</script>