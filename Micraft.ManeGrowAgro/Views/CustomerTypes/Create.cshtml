@model Micraft.ManeGrowAgro.Models.CustomerType

@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="content-header">
    <div class="container-fluid">
        <div class="row mb-4">
            <div class="col-lg-10 col-md-2 col-12">
                <h4>Customer Types</h4>
            </div><!-- /.col -->
        </div><!-- /.row -->
    </div><!-- /.container-fluid -->
</div>


<section class="content">
    <div class="container-fluid">
        <div class="row">
            <div class="col-12">
                <div class="card">
                    <div class="card-body">
                        @using (Html.BeginForm("Create", "CustomerTypes", FormMethod.Post, new
                        {
                            @id = "form0",
                            enctype = "multipart/form-data",
                            @class = "form-horizontal",
                            data_bv_message = "This value is not valid",
                            data_toggle = "validator",
                            data_bv_feedbackicons_valid = "glyphicon glyphicon-ok",
                            data_bv_feedbackicons_invalid = "glyphicon glyphicon-remove",
                            data_bv_feedbackicons_validating = "glyphicon glyphicon-refresh"
                        }))
                        {
                            @Html.AntiForgeryToken()

                            <div class="form-horizontal">
                                
                                @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                            <div class="row">
                                <div class="col-md-4 col-12 mb-3">
                                    @Html.LabelFor(model => model.Type, htmlAttributes: new { })
                                    @Html.EditorFor(model => model.Type, new { htmlAttributes = new { @class = "form-control", Autocomplete = "off", data_bv_notempty = "true", data_bv_notempty_message = "Type is required and cannot be empty", Onchange = "CheckDuplicate()", required = "required", maxlength = "50" } })

                                </div>
                                <div class="col-md-4 col-12 mb-3">
                                    @Html.LabelFor(model => model.Prefix, htmlAttributes: new { })
                                    @Html.EditorFor(model => model.Prefix, new { htmlAttributes = new { @class = "form-control", Autocomplete = "off", data_bv_notempty = "true", data_bv_notempty_message = "Prefix is required and cannot be empty", Onchange = "CheckDuplicate()", required = "required" , maxlength = "10" } })

                                </div>
                                <div class="col-md-4 col-12 mb-3">
                                    @Html.LabelFor(model => model.StartCode, htmlAttributes: new { })
                                    @Html.EditorFor(model => model.StartCode, new { htmlAttributes = new {@type="number", @class = "form-control", Autocomplete = "off", data_bv_notempty = "true", data_bv_notempty_message = "StartCode is required and cannot be empty", required = "required", Onchange = "CheckDuplicate()", maxlength = "6" } })


                                </div>

                            </div>

                                <div class="col-md-8">
                                    <input type="submit" id="AddNew" value="Create" class="btn btn-primary" onclick="CheckVal(event);" />&nbsp;&nbsp;
                                    @Html.ActionLink("Back to List", "Index", null, new { @class = "btn btn-primary" })
                                </div>

                            </div>
                        }

                       
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>
<script>

      $(document).ready(function () {

        $("#form0").bootstrapValidator();

        var tEMP = '@TempData["success"]';
        if (tEMP != "" && tEMP != undefined && tEMP != null) {
            swal("Success!", tEMP, "success");
        }
        var tEMP = '@TempData["error"]';
        if (tEMP != "" && tEMP != undefined && tEMP != null) {
            swal("Error!", tEMP, "error");
        }

      });



    function CheckDuplicate() {
        debugger;
        var Type = $("#Type").val();
        var Prefix = $("#Prefix").val();
        var StartCode = $("#StartCode").val();
         $.ajax({
            url: '@Url.Action("CheckDuplicate", "CustomerTypes")',
            type: "GET",
            dataType: "JSON",
             data: { Type: Type, Prefix: Prefix, StartCode: StartCode, Mode: "Create", ID: 0 },
            success: function (result) {
                try {
                    if (result == "1") {
                        $("#Type").val("");
                        $("#form0").bootstrapValidator('revalidateField', 'Type');
                        $("#Prefix").val("");
                        $("#form0").bootstrapValidator('revalidateField', 'Prefix');
                        $("#StartCode").val("");
                        $("#form0").bootstrapValidator('revalidateField', 'StartCode');

                        toastr.error("Record already exist");
                    }
                    else if (result == "0") {

                    }
                    else {
                        toastr.error(result);
                    }
                }
                catch (e) {

                }
            }
        });
    }
</script>